Массив представляет набор однотипных значений. Объявление массива похоже на объявление обычной переменной, которая хранит одиночное значение, причем есть два способа объявления массива:<br/>
<tt>тип_данных название_массива[];<br/>
// либо<br/>
тип_данных[] название_массива;</tt><br/>
<br/>

Например, определим массив чисел:<br/>
<tt>int nums[];<br/>
int[] nums2;</tt><br/>
<br/>

После объявления массива мы можем инициализовать его:<br/>
<tt>int nums[];<br/>
nums = new int[4];  // массив из 4 чисел</tt><br/>
<br/>

Создание массива производится с помощью следующей конструкции: new тип_данных[количество_элементов], где new - ключевое слово, выделяющее память для указанного в скобках количества элементов. Например, nums = new int[4]; - в этом выражении создается массив из четырех элементов int, и каждый элемент будет иметь значение по умолчанию - число 0.<br/>
<br/>
Также можно сразу при объявлении массива инициализировать его:<br/>
<tt>int nums[] = new int[4];    // массив из 4 чисел<br/>
int[] nums2 = new int[5];   // массив из 5 чисел</tt><br/>
<br/>

При подобной инициализации все элементы массива имеют значение по умолчанию. Для числовых типов (в том числе для типа char) это число 0, для типа boolean это значение false, а для остальных объектов это значение null. Например, для типа int значением по умолчанию является число 0, поэтому выше определенный массив nums будет состоять из четырех нулей.<br/>
<br/>
Однако также можно задать конкретные значения для элементов массива при его создании:<br/>
<tt>// эти два способа равноценны<br/>
int[] nums = new int[] { 1, 2, 3, 5 };<br/>
int[] nums2 = { 1, 2, 3, 5 };</tt><br/>
<br/>

Стоит отметить, что в этом случае в квадратных скобках не указывается размер массива, так как он вычисляется по количеству элементов в фигурных скобках.<br/>
<br/>
После создания массива мы можем обратиться к любому его элементу по индексу, который передается в квадратных скобках после названия переменной массива:<br/>
<tt>int[] nums = new int[4];<br/>
// устанавливаем значения элементов массива<br/>
nums[0] = 1;<br/>
nums[1] = 2;<br/>
nums[2] = 4;<br/>
nums[3] = 100;<br/>
// получаем значение третьего элемента массива<br/>
System.out.println(nums[2]);    // 4</tt><br/>
<br/>

Индексация элементов массива начинается с 0, поэтому в данном случае, чтобы обратиться к четвертому элементу в массиве, нам надо использовать выражение nums[3].<br/>
<br/>
И так как у нас массив определен только для 4 элементов, то мы не можем обратиться, например, к шестому элементу: nums[5] = 5;. Если мы так попытаемся сделать, то мы получим ошибку.<br/>
<br/>
<br/>

<b>Длина массива</b><br/>
<br/>
Важнейшее свойство, которым обладают массивы, является свойство length, возвращающее длину массива, то есть количество его элементов:<br/>
<tt>int[] nums = {1, 2, 3, 4, 5};<br/>
int length = nums.length;   // 5</tt><br/>
<br/>
Нередко бывает неизвестным последний индекс, и чтобы получить последний элемент массива, мы можем использовать это свойство:<br/>
<tt>int last = nums[nums.length-1];</tt><br/>
<br/>
<br/>

<b>Многомерные массивы</b><br/>
<br/>
Ранее мы рассматривали одномерные массивы, которые можно представить как цепочку или строку однотипных значений. Но кроме одномерных массивов также бывают и многомерными. Наиболее известный многомерный массив - таблица, представляющая двухмерный массив:<br/>
<tt>int[] nums1 = new int[] { 0, 1, 2, 3, 4, 5 };<br/>
int[][] nums2 = { { 0, 1, 2 }, { 3, 4, 5 } };</tt><br/>
<br/>
Визуально оба массива можно представить следующим образом:<br/>
<br/>
Одномерный массив nums1<br/>
<table border = "solid"><br/>
<tr><br/>
<th>0</th><br/>
<th>1</th><br/>
<th>2</th><br/>
<th>3</th><br/>
<th>4</th><br/>
<th>5</th></tr><br/>
</table><br/>
<br/>
Двухмерный массив nums2<br/>
<table border = "solid"><br/>
    <tr><br/>
        <th>0</th><br/>
        <th>1</th><br/>
        <th>2</th><br/>
    </tr><br/>
    <tr><br/>
        <th>3</th><br/>
        <th>4</th><br/>
        <th>5</th><br/>
    </tr><br/>
</table><br/>

Поскольку массив nums2 двухмерный, он представляет собой простую таблицу. Его также можно было создать следующим образом: int[][] nums2 = new int[2][3];. Количество квадратных скобок указывает на размерность массива. А числа в скобках - на количество строк и столбцов. И также, используя индексы, мы можем использовать элементы массива в программе:<br/>
<tt>// установим элемент первого столбца второй строки<br/>
nums2[1][0]=44;<br/>
System.out.println(nums2[1][0]);</tt><br/>
<br/>

Объявление трехмерного массива могло бы выглядеть так:<br/>
<tt>int[][][] nums3 = new int[2][3][4];</tt><br/>
<br/>
<br/>

<b>Зубчатый массив</b><br/>
<br/>
Многомерные массивы могут быть также представлены как "зубчатые массивы". В вышеприведенном примере двухмерный массив имел 3 строчки и три столбца, поэтому у нас получалась ровная таблица. Но мы можем каждому элементу в двухмерном массиве присвоить отдельный массив с различным количеством элементов:<br/>
<tt>int[][] nums = new int[3][];<br/>
nums[0] = new int[2];<br/>
nums[1] = new int[3];<br/>
nums[2] = new int[5];</tt><br/>
<br/>
<br/>

<b>foreach</b><br/>
<br/>
Специальная версия цикла for предназначена для перебора элементов в наборах элементов, например, в массивах и коллекциях. Она аналогична действию цикла foreach , который имеется в других языках программирования. Формальное ее объявление:<br/>
<tt>for (тип_данных название_переменной : контейнер){<br/>
    // действия<br/>
}</tt><br/>
<br/>

Например:<br/>
<tt>int[] array = new int[] { 1, 2, 3, 4, 5 };<br/>
for (int i : array){<br/>
    System.out.println(i);<br/>
}</tt><br/>
<br/>

В качестве контейнера в данном случае выступает массив данных типа int. Затем объявляется переменная с типом int<br/>
<br/>
То же самое можно было бы сделать и с помощью обычной версии for:<br/>
<tt>int[] array = new int[] { 1, 2, 3, 4, 5 };<br/>
for (int i = 0; i < array.length; i++){<br/>
    System.out.println(array[i]);<br/>
}</tt><br/>
<br/>

В то же время эта версия цикла for более гибкая по сравнению for (int i : array). В частности, в этой версии мы можем изменять элементы:<br/>
<tt>int[] array = new int[] { 1, 2, 3, 4, 5 };<br/>
for (int i=0; i<array.length;i++){<br/>
    array[i] = array[i] * 2;<br/>
    System.out.println(array[i]);<br/>
}</tt><br/>
<br/>

<b>Перебор многомерных массивов в цикле</b><br/><br/>
<tt>int[][] nums = new int[][]<br/>
{<br/>
    {1, 2, 3},<br/>
    {4, 5, 6},<br/>
    {7, 8, 9}<br/>
};<br/>
for (int i = 0; i < nums.length; i++){<br/>
    for(int j=0; j < nums[i].length; j++){<br/>
        System.out.printf("%d ", nums[i][j]);<br/>
    }<br/>
    System.out.println();<br/>
}</tt><br/>
<br/>
Сначала создается цикл для перебора по строкам, а затем внутри первого цикла создается внутренний цикл для перебора по столбцам конкретной строки. Подобным образом можно перебрать и трехмерные массивы и наборы с большим количеством размерностей.<br/>