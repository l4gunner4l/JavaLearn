Еще одним видом управляющих конструкций являются циклы. Циклы позволяют в зависимости от определенных условий выполнять определенное действие множество раз. В языке Java есть следующие виды циклов:<br/>
1) for<br/>
2) while<br/>
3) do...while<br/>
<br/>
<br/>

<b>Цикл for</b><br/>
<br/>

Цикл for имеет следующее формальное определение:<br/>
<tt>for ([инициализация счетчика]; [условие]; [изменение счетчика])<br/>
{<br/>
    // действия<br/>
}</tt><br/>
<br/>

Рассмотрим стандартный цикл for:<br/>
<tt>for (int i = 1; i < 9; i++){<br/>
    System.out.printf("Квадрат числа %d равен %d \n", i, i * i);<br/>
}</tt><br/>
<br/>

Первая часть объявления цикла - int i = 1 создает и инициализирует счетчик i. Счетчик необязательно должен представлять тип int. Это может быть и любой другой числовой тип, например, float. Перед выполнением цикла значение счетчика будет равно 1. В данном случае это то же самое, что и объявление переменной.<br/>
<br/>
Вторая часть - условие, при котором будет выполняться цикл. В данном случае цикл будет выполняться, пока i не достигнет 9.<br/>
<br/>
И третья часть - приращение счетчика на единицу. Опять же нам необязательно увеличивать на единицу. Можно уменьшать: i--.<br/>
<br/>
В итоге блок цикла сработает 8 раз, пока значение i не станет равным 9. И каждый раз это значение будет увеличиваться на 1.<br/>
<br/>

Нам необязательно указывать все условия при объявлении цикла. Например, мы можем написать так:<br/>
<tt>int i = 1;<br/>
for (; ;){<br/>
    System.out.printf("Квадрат числа %d равен %d \n", i, i * i);<br/>
}</tt><br/>
<br/>
Определение цикла осталось тем же, только теперь блоки в определении у нас пустые: for (; ;). Теперь нет инициализированной переменной-счетчика, нет условия, поэтому цикл будет работать вечно - бесконечный цикл.<br/>
<br/>

Либо можно опустить ряд блоков:<br/>
<tt>int i = 1;<br/>
for (; i<9;){<br/>
    System.out.printf("Квадрат числа %d равен %d \n", i, i * i);<br/>
    i++;<br/>
}</tt><br/>
<br/>

Этот пример эквивалентен первому примеру: у нас также есть счетчик, только создан он вне цикла. У нас есть условие выполнения цикла. И есть приращение счетчика уже в самом блоке for.<br/>
<br/>
Цикл for может определять сразу несколько переменных и управлять ими:<br/>
<tt>int n = 10;<br/>
for(int i=0, j = n - 1; i < j; i++, j--){<br/>
    System.out.println(i * j);<br/>
}</tt><br/>
<br/>
<br/>

<b>Цикл do</b><br/>
<br/>
Цикл do сначала выполняет код цикла, а потом проверяет условие в инструкции while. И пока это условие истинно, цикл повторяется. Например:<br/>
<tt>int j = 7;<br/>
do{<br/>
    System.out.println(j);<br/>
    j--;<br/>
}<br/>
while (j > 0);</tt><br/>
<br/>
В данном случае код цикла сработает 7 раз, пока j не окажется равным нулю. Важно отметить, что цикл do гарантирует хотя бы однократное выполнение действий, даже если условие в инструкции while не будет истинно. Так, мы можем написать:<br/>
<tt>int j = -1;<br/>
do{<br/>
    System.out.println(j);<br/>
    j--;<br/>
}<br/>
while (j > 0);</tt><br/>
<br/>
Хотя переменная j изначально меньше 0, цикл все равно один раз выполнится.<br/>
<br/>
<br/>

<b>Цикл while</b><br/>
<br/>
Цикл while сразу проверяет истинность некоторого условия, и если условие истинно, то код цикла выполняется:<br/>
<tt>int j = 6;<br/>
while (j > 0){<br/>
<br/>
    System.out.println(j);<br/>
    j--;<br/>
}</tt><br/>
<br/>
<br/>

<b>Операторы continue и break</b><br/>
<br/>
Оператор break позволяет выйти из цикла в любой его момент, даже если цикл не закончил свою работу:<br/>
<br/>
Например:<br/>
<tt>for (int i = 0; i < 10; i++){<br/>
    if (i == 5)<br/>
        break;<br/>
    System.out.println(i);<br/>
}</tt><br/>
<br/>
Когда счетчик станет равным 5, сработает оператор break, и цикл завершится.<br/>
<br/>
Теперь сделаем так, чтобы если число равно 5, цикл не завершался, а просто переходил к следующей итерации. Для этого используем оператор continue:<br/>
<tt>for (int i = 0; i < 10; i++){<br/>
    if (i == 5)<br/>
        continue;<br/>
    System.out.println(i);<br/>
}</tt><br/>
<br/>
В этом случае, когда выполнение цикла дойдет до числа 5, программа просто пропустит это число и перейдет к следующему.<br/>