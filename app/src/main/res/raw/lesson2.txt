Наиболее простой способ ввзаимодействия с пользователем представляет консоль: мы можем выводить на консоль некоторую информацию или, наоборот, считывать с консоли некоторые данные. Для взаимодействия с консолью в Java применяется класс System, а его функциональность собственно обеспечивает консольный ввод и вывод.<br/>
<br/>
<br/>

<b>Вывод на консоль</b><br/>
<br/>
Для создания потока вывода в класс System определен объект out. В этом объекте определен метод println, который позволяет вывести на консоль некоторое значение с последующим переводом консоли на следующую строку. Например:<br/>
<tt>public class Program {<br/>
    public static void main(String[] args) {<br/>
        System.out.println("Hello world!");<br/>
        System.out.println("Bye world...");<br/>
    }<br/>

}</tt><br/>
<br/>

В метод println передается любое значение, как правило, строка, которое надо вывести на консоль. И в данном случае мы получим следующий вывод:<br/>
<tt>Hello world!<br/>
Bye world...</tt><br/>
<br/>

При необходимости можно и не переводить курсор на следующую строку. В этом случае можно использовать метод System.out.print(), который аналогичен println за тем исключением, что не осуществляет перевода на следующую строку.<br/>
<tt>public class Program {<br/>
    public static void main(String[] args) {<br/>
        System.out.print("Hello world!");<br/>
        System.out.print("Bye world...");<br/>
    }<br/>
}</tt><br/>
<br/>

Консольный вывод данной программы:<br/>
<tt>Hello world!Bye world...</tt><br/>
<br/>

Но с помощью метода System.out.print также можно осуществить перевод каретки на следующую строку. Для этого надо использовать escape-последовательность \n:<br/>
<tt>System.out.print("Hello world \n");</tt><br/>
<br/>

Нередко необходимо подставлять в строку какие-нибудь данные. Например, у нас есть два числа, и мы хотим вывести их значения на экран. В этом случае мы можем, например, написать так:<br/>
<tt>public class Program {<br/>
    public static void main(String[] args) {<br/>
        int x=5;<br/>
        int y=6;<br/>
        System.out.println("x=" + x + "; y=" + y);<br/>
    }<br/>
}</tt><br/>
<br/>

Консольный вывод программы:<br/>
<tt>x=5; y=6</tt><br/>
<br/>

Но в Java есть также функция для форматированного вывода, унаследованная от языка С: System.out.printf(). С ее помощью мы можем переписать предыдущий пример следующим образом:<br/>
<tt>int x=5;<br/>
int y=6;</tt><br/>
<tt>System.out.printf("x=%d; y=%d \n", x, y);</tt><br/>
<br/>

В данном случае символы %d обозначают спецификатор, вместо которого подставляет один из аргументов. Спецификаторов и соответствующих им аргументов может быть множество. В данном случае у нас только два аргумента, поэтому вместо первого %d подставляет значение переменной x, а вместо второго - значение переменной y. Сама буква d означает, что данный спецификатор будет использоваться для вывода целочисленных значений.<br/>
<br/>
Кроме спецификатора %d мы можем использовать еще ряд спецификаторов для других типов данных:<br/>
    %x: для вывода шестнадцатеричных чисел<br/>
    %f: для вывода чисел с плавающей точкой<br/>
    %e: для вывода чисел в экспоненциальной форме, например, 1.3e+01<br/>
    %c: для вывода одиночного символа<br/>
    %s: для вывода строковых значений<br/>
<br/>

Например:<br/>
<tt>public class Program {<br/>
    public static void main(String[] args) {<br/>
        String name = "Tom";<br/>
        int age = 30;<br/>
        float height = 1.7f;<br/>
        System.out.printf("Name: %s  Age: %d  Height: %.2f \n", name, age, height);<br/>
    }<br/>
}</tt><br/>
<br/>

При выводе чисел с плавающей точкой мы можем указать количество знаков после запятой, для этого используем спецификатор на %.2f, где .2 указывает, что после запятой будет два знака. В итоге мы получим следующий вывод:<br/>
<tt>Name: Tom  Age: 30  Height: 1,70</tt><br/>
<br/>
<br/>

<b>Ввод с консоли</b><br/>
<br/>
Для получения ввода с консоли в классе System определен объект in. Однако непосредственно через объект System.in не очень удобно работать, поэтому, как правило, используют класс Scanner, который, в свою очередь использует System.in. Например, напишем маленькую программу, которая осуществляет ввод чисел:<br/>
<br/>
<tt>import java.util.Scanner;<br/>
<br/>
public class Program {<br/>
<br/>
    public static void main(String[] args) {<br/>

<br/>
        Scanner in = new Scanner(System.in);<br/>

        System.out.print("Input a number: ");<br/>

        int num = in.nextInt();<br/>

<br/>
        System.out.printf("Your number: %d \n", num);<br/>

        in.close();<br/>

    }<br/>

}</tt><br/>
<br/>
Так как класс Scanner находится в пакете java.util, то мы вначале его импортируем с помощью инструкции import java.util.Scanner.<br/>
<br/>
Для создания самого объекта Scanner в его конструктор передается объект System.in. После этого мы можем получать вводимые значения. Например, в данном случае вначале выводим приглашение к вводу и затем получаем вводимое число в переменную num.<br/>
<br/>
Чтобы получить введенное число, используется метод in.nextInt();, который возвращает введенное с клавиатуры целочисленное значение.<br/>
<br/>
Пример работы программы:<br/>
<tt>Input a number: 5<br/>
Your number: 5</tt><br/>
<br/>
Класс Scanner имеет еще ряд методов, которые позволяют получить введенные пользователем значения:<br/>

    next(): считывает введенную строку до первого пробела<br/>
    nextLine(): считывает всю введенную строку<br/>
    nextInt(): считывает введенное число int<br/>
    nextDouble(): считывает введенное число double<br/>
    nextBoolean(): считывает значение boolean<br/>
    nextByte(): считывает введенное число byte<br/>
    nextFloat(): считывает введенное число float<br/>
    nextShort(): считывает введенное число short<br/>

<br/>
То есть для ввода значений каждого примитивного типа в классе Scanner определен свой метод.<br/>
<br/>
Например, создадим программу для ввода информации о человеке:<br/>
<tt>import java.util.Scanner;<br/>
<br/>
public class Program {<br/>
<br/>
    public static void main(String[] args) {<br/>

<br/>
        Scanner in = new Scanner(System.in);<br/>

        System.out.print("Input name: ");<br/>

        String name = in.nextLine();<br/>
<br/>
        System.out.print("Input age: ");<br/>

        int age = in.nextInt();<br/>
<br/>
        System.out.print("Input height: ");<br/>

        float height = in.nextFloat();<br/>
<br/>
        System.out.printf("Name: %s  Age: %d  Height: %.2f \n", name, age, height);<br/>

        in.close();<br/>

    }<br/>

}</tt><br/>
<br/>

Здесь последовательно вводятся данные типов String, int, float и потом все введенные данные вместе выводятся на консоль. Пример работы программы:<br/>
<tt>Input name: Tom<br/>
Input age: 34<br/>
Input height: 1,7<br/>
Name: Tom  Age: 34  Height: 1,70</tt><br/>
<br/>

Обратите внимание для ввода значения типа float (то же самое относится к типу double) применяется число "1,7", где разделителем является запятая, а не "1.7", где разделителем является точка. В данном случае все зависит от текущей языковой локализации системы. В моем случае русскоязычная локализация, соответственно вводить необходимо числа, где разделителем является запятая. То же самое касается многих других локализаций, например, немецкой, французской и т.д., где применяется запятая.<br/>