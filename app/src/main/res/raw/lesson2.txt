Одной из основных особенностей Java является то, что данный язык является строго типизированным. А это значит, что каждая переменная и константа представляет определенный тип и данный тип строго определен. Тип данных определяет диапазон значений, которые может хранить переменная или константа.

Итак, рассмотрим систему встроенных базовых типов данных, которая используется для создания переменных в Java. А она представлена следующими типами.

<b>boolean: хранит значение true или false</b>

<tt>boolean isActive = false;
boolean isAlive = true;</tt>

<b>byte: хранит целое число от -128 до 127 и занимает 1 байт</b>

<tt>byte a = 3;
byte b = 8;</tt>

<b>short: хранит целое число от -32768 до 32767 и занимает 2 байта</b>

<tt>short a = 3;
short b = 8;</tt>

<b>int: хранит целое число от -2147483648 до 2147483647 и занимает 4 байта</b>

<tt>int a = 4;
int b = 9;</tt>

<b>long: хранит целое число от –9 223 372 036 854 775 808 до 9 223 372 036 854 775 807 и занимает 8 байт</b>

<tt>long a = 5;
long b = 10;</tt>

<b>double: хранит число с плавающей точкой от ±4.9*10-324 до ±1.8*10308 и занимает 8 байт</b>

<tt>double x = 8.5;
double y = 2.7;</tt>

В качестве разделителя целой и дробной части в дробных литералах используется точка.

<b>float: хранит число с плавающей точкой от -3.4*1038 до 3.4*1038 и занимает 4 байта</b>

<tt>float x = 8.5F;
float y = 2.7F;</tt>

<b>char: хранит одиночный символ в кодировке UTF-16 и занимает 2 байта, поэтому диапазон хранимых значений от 0 до 65535</b>

При этом переменная может принимать только те значения, которые соответствуют ее типу. Если переменная предствляет целочисленный тип, то она не может хранить дробные числа.

Целые числа

Все целочисленные литералы, например, 10,4, -5, воспринимаются как значения типа int, однако мы можем присваивать целочисленные литералы другим целочисленным типам: byte, long, short. В этом случае Java автоматически осуществляет соответствующие преобразования:

<tt>byte a = 1;
short b = 2;
long c = 2121;</tt>

Однако если мы захотим присвоить переменной типа long очень большое число, которое выходит за пределы допустимых значений для типа int, то мы столкнемся с ошибкой во время компиляции:

<tt>long num = 2147483649;</tt>

Здесь число 2147483649 является допустимым для типа long, но выходит за предельные значения для тпа int. И так как все целочисленные значения по умолчанию расцениваются как значения типа int, то компилятор укажет нам на ошибку. Чтобы решить проблему, надо добавить к числу суффикс l или L, который указывает, что число представляет тип long:

<tt>long num = 2147483649L;</tt>

Как правило, значения для целочисленных переменных задаются в десятичной системе счисления, однако мы можем применять и другие системы исчисления. Например:

<tt>int num111 = 0x6F; // 16-тиричная система, число 111
int num8 = 010; // 8-ричная система, число 8
int num13 = 0b1101; // 2-ичная система, число 13</tt>

Для задания шестнадцатеричного значения после символов 0x указывается число в шестнадцатеричном формате. Таким же образом восьмеричное значение указывается после символа 0, а двоичное значение - после символов 0b.

Также целые числа поддерживают разделение разрядов числа с помощью знака подчеркивания:

<tt>int x = 123_456;
int y = 234_567__789;
System.out.println(x);  // 123456
System.out.println(y);  // 234567789</tt>

Числа с плавающей точкой

При присвоении переменной типа float дробного литерала с плавающей точкой, например, 3.1, 4.5 и т.д., Java автоматически рассматривает этот литерал как значение типа double. И чтобы указать, что данное значение должно рассматриваться как float, нам надо использовать суффикс f:

<tt>float fl = 30.6f;
double db = 30.6;</tt>

И хотя в данном случае обе переменных имеют практически одно значения, но эти значения будут по-разному рассматриваться и будут занимать разное место в памяти.

Символы и строки

В качестве значения переменная символьного типа получает одиночный символ, заключенный в ординарные кавычки: char ch='e';. Кроме того, переменной символьного типа также можно присвоить целочисленное значение от 0 до 65535. В этом случае переменная опять же будет хранить символ, а целочисленное значение будет указывать на номер символа в таблице символов Unicode (UTF-16). Например:

<tt>char ch=102; // символ 'f'
System.out.println(ch);</tt>

Еще одной формой задания символьных переменных является шестнадцатеричная форма: переменная получает значение в шестнадцатеричной форме, которое следует после символов "\u". Например, char ch='\u0066'; опять же будет хранить символ 'f'.

Символьные переменные не стоит путать со строковыми, 'a' не идентично "a". Строковые переменные представляют объект String, который в отличие от char или int не является примитивным типов в Java:

<tt>String hello = "Hello...";
System.out.println(hello);</tt>